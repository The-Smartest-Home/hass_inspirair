name: ðŸ§ª Test all Python versions

on:
  pull_request:
    branches: ["main"]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Poetry install
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load virtual environment cache
        id: cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          poetry install
          poetry build
      - name: Run Tests
        env:
          HI_CFG_LANGUAGE: de
        run: |
          TARGET_PYTHON_VERSION=${{ matrix.python-version }} docker compose up --build client-pip mqtt modbus -d --wait
          poetry run pytest --junitxml=reports/pytest-${{ matrix.os }}-${{ matrix.python-version }}.xml
